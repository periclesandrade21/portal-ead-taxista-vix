name: Deploy Portal EAD Taxista VIX

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Frontend build test
      run: |
        cd frontend
        npm run build

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v --cov=. --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage.xml,./frontend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    strategy:
      matrix:
        component: [frontend, backend]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.component }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Oracle Cloud
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy via webhook
      run: |
        curl -X POST \
          -H "Content-Type: application/json" \
          -H "X-Hub-Signature: sha1=$(echo -n "${{ github.event.head_commit.id }}" | openssl dgst -sha1 -hmac "${{ secrets.WEBHOOK_SECRET }}" | sed 's/^.* //')" \
          -d '{
            "ref": "${{ github.ref }}",
            "head_commit": {
              "id": "${{ github.sha }}"
            },
            "repository": {
              "name": "${{ github.event.repository.name }}"
            }
          }' \
          "${{ secrets.WEBHOOK_URL }}"

    - name: Wait for deployment
      run: |
        echo "⏳ Waiting for deployment to complete..."
        sleep 60

    - name: Health Check
      run: |
        echo "🏥 Performing health checks..."
        
        # Check main application
        for i in {1..10}; do
          if curl -f "${{ secrets.APP_URL }}/api/health" > /dev/null 2>&1; then
            echo "✅ Backend is healthy"
            break
          fi
          echo "⏳ Waiting for backend... (attempt $i/10)"
          sleep 10
        done
        
        # Check frontend
        for i in {1..10}; do
          if curl -f "${{ secrets.APP_URL }}" > /dev/null 2>&1; then
            echo "✅ Frontend is healthy"
            break
          fi
          echo "⏳ Waiting for frontend... (attempt $i/10)"
          sleep 10
        done
        
        echo "🎉 Deployment completed successfully!"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        echo "🌐 Application: ${{ secrets.APP_URL }}"
        echo "📚 Moodle: ${{ secrets.APP_URL }}/moodle"
        
    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "Please check the logs and try again."