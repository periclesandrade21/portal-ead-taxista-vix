#cloud-config
package_update: true
package_upgrade: true

packages:
  - docker.io
  - docker-compose
  - nginx
  - certbot
  - python3-certbot-nginx
  - git
  - curl
  - htop
  - nodejs
  - npm
  - python3
  - python3-pip
  - webhook

groups:
  - docker

users:
  - default
  - name: ubuntu
    groups: docker

write_files:
  - path: /home/ubuntu/docker-compose.yml
    content: |
      version: '3.8'
      services:
        # MongoDB for EAD Application
        mongodb:
          image: mongo:7.0
          container_name: taxista-mongodb
          restart: unless-stopped
          environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: ${mongo_password}
            MONGO_INITDB_DATABASE: taxista_ead
          ports:
            - "27017:27017"
          volumes:
            - mongodb_data:/data/db
            - /home/ubuntu/mongodb-init:/docker-entrypoint-initdb.d
          networks:
            - taxista-network

        # PostgreSQL for Moodle
        postgres:
          image: postgres:15
          container_name: taxista-postgres
          restart: unless-stopped
          environment:
            POSTGRES_DB: moodle
            POSTGRES_USER: moodle
            POSTGRES_PASSWORD: ${postgres_password}
          ports:
            - "5432:5432"
          volumes:
            - postgres_data:/var/lib/postgresql/data
          networks:
            - taxista-network

        # Moodle
        moodle:
          image: moodle:4.3-apache
          container_name: taxista-moodle
          restart: unless-stopped
          environment:
            MOODLE_DATABASE_TYPE: pgsql
            MOODLE_DATABASE_HOST: postgres
            MOODLE_DATABASE_NAME: moodle
            MOODLE_DATABASE_USER: moodle
            MOODLE_DATABASE_PASSWORD: ${postgres_password}
            MOODLE_ADMIN_USER: admin
            MOODLE_ADMIN_PASSWORD: Admin@123!
            MOODLE_ADMIN_EMAIL: admin@sindtaxi-es.org
            MOODLE_SITE_NAME: "EAD Taxistas - Moodle"
            MOODLE_SITE_FULLNAME: "Plataforma de Ensino à Distância para Taxistas do Espírito Santo"
            MOODLE_WWWROOT: ${domain_name != "" ? "https://${domain_name}/moodle" : "http://localhost/moodle"}
          ports:
            - "8080:80"
          volumes:
            - moodle_data:/var/www/html
          depends_on:
            - postgres
          networks:
            - taxista-network

        # Backend API (Built from GitHub repo)
        backend:
          build:
            context: /home/ubuntu/portal-ead-taxista-vix/backend
            dockerfile: Dockerfile
          container_name: taxista-backend
          restart: unless-stopped
          environment:
            MONGO_URL: mongodb://admin:${mongo_password}@mongodb:27017/taxista_ead?authSource=admin
            DB_NAME: taxista_ead
            CORS_ORIGINS: "*"
            AUTH0_DOMAIN: ${auth0_domain}
            AUTH0_CLIENT_ID: ${auth0_client_id}
            AUTH0_CLIENT_SECRET: ${auth0_client_secret}
          ports:
            - "8001:8001"
          depends_on:
            - mongodb
          networks:
            - taxista-network
          volumes:
            - /home/ubuntu/portal-ead-taxista-vix/backend:/app

        # Frontend (Built from GitHub repo)
        frontend:
          build:
            context: /home/ubuntu/portal-ead-taxista-vix/frontend
            dockerfile: Dockerfile
          container_name: taxista-frontend
          restart: unless-stopped
          environment:
            REACT_APP_BACKEND_URL: ${domain_name != "" ? "https://${domain_name}" : "http://localhost:8001"}
            REACT_APP_AUTH0_DOMAIN: ${auth0_domain}
            REACT_APP_AUTH0_CLIENT_ID: ${auth0_client_id}
            REACT_APP_MOODLE_URL: ${domain_name != "" ? "https://${domain_name}/moodle" : "http://localhost/moodle"}
          ports:
            - "3000:3000"
          depends_on:
            - backend
          networks:
            - taxista-network
          volumes:
            - /home/ubuntu/portal-ead-taxista-vix/frontend:/app

        # Nginx Reverse Proxy
        nginx:
          image: nginx:alpine
          container_name: taxista-nginx
          restart: unless-stopped
          ports:
            - "80:80"
            - "443:443"
          volumes:
            - /home/ubuntu/nginx.conf:/etc/nginx/nginx.conf:ro
            - /etc/letsencrypt:/etc/letsencrypt:ro
          depends_on:
            - frontend
            - backend
            - moodle
          networks:
            - taxista-network

        # Webhook listener for CI/CD
        webhook:
          image: almir/webhook
          container_name: taxista-webhook
          restart: unless-stopped
          ports:
            - "9000:9000"
          volumes:
            - /home/ubuntu/hooks.json:/etc/webhook/hooks.json
            - /home/ubuntu/deploy.sh:/home/ubuntu/deploy.sh
            - /var/run/docker.sock:/var/run/docker.sock
            - /home/ubuntu:/home/ubuntu
          command: ["-verbose", "-hooks=/etc/webhook/hooks.json", "-hotreload"]

      volumes:
        mongodb_data:
        postgres_data:
        moodle_data:

      networks:
        taxista-network:
          driver: bridge

  - path: /home/ubuntu/nginx.conf
    content: |
      events {
          worker_connections 1024;
      }

      http {
          upstream frontend {
              server frontend:3000;
          }

          upstream backend {
              server backend:8001;
          }

          upstream moodle {
              server moodle:80;
          }

          # Redirect HTTP to HTTPS (if SSL is configured)
          server {
              listen 80;
              server_name ${domain_name != "" ? domain_name : "_"};
              
              # Allow Let's Encrypt challenges
              location /.well-known/acme-challenge/ {
                  root /var/www/html;
              }
              
              # Redirect to HTTPS if domain is configured
              %{ if domain_name != "" }
              location / {
                  return 301 https://$server_name$request_uri;
              }
              %{ else }
              # Frontend routes
              location / {
                  proxy_pass http://frontend;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              # Backend API routes
              location /api {
                  proxy_pass http://backend;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              # Moodle routes
              location /moodle {
                  proxy_pass http://moodle;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
              %{ endif }
          }

          %{ if domain_name != "" }
          # HTTPS server (if domain is configured)
          server {
              listen 443 ssl http2;
              server_name ${domain_name};

              ssl_certificate /etc/letsencrypt/live/${domain_name}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/${domain_name}/privkey.pem;
              
              # SSL configuration
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
              ssl_prefer_server_ciphers off;
              ssl_session_cache shared:SSL:10m;

              # Frontend routes
              location / {
                  proxy_pass http://frontend;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              # Backend API routes
              location /api {
                  proxy_pass http://backend;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              # Moodle routes
              location /moodle {
                  proxy_pass http://moodle;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          %{ endif }
      }

  - path: /home/ubuntu/hooks.json
    content: |
      [
        {
          "id": "portal-ead-deploy",
          "execute-command": "/home/ubuntu/deploy.sh",
          "command-working-directory": "/home/ubuntu",
          "pass-arguments-to-command": [
            {
              "source": "payload",
              "name": "head_commit.id"
            },
            {
              "source": "payload", 
              "name": "repository.name"
            }
          ],
          "trigger-rule": {
            "and": [
              {
                "match": {
                  "type": "payload-hmac-sha1",
                  "secret": "${webhook_secret}",
                  "parameter": {
                    "source": "header",
                    "name": "X-Hub-Signature"
                  }
                }
              },
              {
                "match": {
                  "type": "value",
                  "value": "refs/heads/main",
                  "parameter": {
                    "source": "payload",
                    "name": "ref"
                  }
                }
              }
            ]
          }
        }
      ]

  - path: /home/ubuntu/deploy.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      
      set -e
      
      echo "🚀 Starting deployment at $(date)"
      echo "Commit: $1"
      echo "Repository: $2"
      
      cd /home/ubuntu
      
      # Pull latest changes
      echo "📥 Pulling latest changes from GitHub..."
      cd portal-ead-taxista-vix
      git pull origin main
      
      echo "🔄 Rebuilding and restarting containers..."
      cd /home/ubuntu
      
      # Stop containers
      docker-compose down
      
      # Rebuild images
      docker-compose build --no-cache backend frontend
      
      # Start containers
      docker-compose up -d
      
      # Wait for services to be ready
      echo "⏳ Waiting for services to start..."
      sleep 30
      
      # Check if services are running
      if docker-compose ps | grep -q "Up"; then
          echo "✅ Deployment successful at $(date)"
          echo "🌐 Application available at: http://$(curl -s ifconfig.me)"
      else
          echo "❌ Deployment failed - some services are not running"
          docker-compose logs
          exit 1
      fi

  - path: /home/ubuntu/setup.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      
      set -e
      
      echo "🔧 Starting initial setup..."
      
      # Wait for Docker to be ready
      sleep 30
      
      # Clone the GitHub repository
      cd /home/ubuntu
      if [ ! -d "portal-ead-taxista-vix" ]; then
          echo "📥 Cloning repository..."
          git clone ${github_repo}
          chown -R ubuntu:ubuntu portal-ead-taxista-vix
      fi
      
      # Create Dockerfiles if they don't exist in the repo
      cd portal-ead-taxista-vix
      
      # Backend Dockerfile
      if [ ! -f "backend/Dockerfile" ]; then
          echo "📝 Creating backend Dockerfile..."
          cat > backend/Dockerfile << 'EOF'
      FROM python:3.11-slim

      WORKDIR /app

      # Install system dependencies
      RUN apt-get update && apt-get install -y \
          gcc \
          curl \
          && rm -rf /var/lib/apt/lists/*

      # Copy requirements and install dependencies
      COPY requirements.txt .
      RUN pip install --no-cache-dir -r requirements.txt

      # Copy application code
      COPY . .

      # Create non-root user
      RUN adduser --disabled-password --gecos '' appuser && chown -R appuser:appuser /app
      USER appuser

      # Expose port
      EXPOSE 8001

      # Health check
      HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
        CMD curl -f http://localhost:8001/api/health || exit 1

      # Start application
      CMD ["uvicorn", "server:app", "--host", "0.0.0.0", "--port", "8001", "--reload"]
      EOF
      fi
      
      # Frontend Dockerfile
      if [ ! -f "frontend/Dockerfile" ]; then
          echo "📝 Creating frontend Dockerfile..."
          cat > frontend/Dockerfile << 'EOF'
      FROM node:18-alpine AS build

      WORKDIR /app

      # Copy package files
      COPY package*.json ./

      # Install dependencies
      RUN npm ci

      # Copy source code
      COPY . .

      # Build the application
      RUN npm run build

      # Production stage
      FROM nginx:alpine

      # Copy custom nginx config
      COPY nginx.conf /etc/nginx/conf.d/default.conf || echo "server { listen 3000; root /usr/share/nginx/html; index index.html; location / { try_files \$uri \$uri/ /index.html; } }" > /etc/nginx/conf.d/default.conf

      # Copy built application
      COPY --from=build /app/build /usr/share/nginx/html

      # Expose port
      EXPOSE 3000

      # Health check
      HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
        CMD wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1

      # Start nginx
      CMD ["nginx", "-g", "daemon off;"]
      EOF
      fi
      
      # Go back to home directory
      cd /home/ubuntu
      
      # Build and start containers
      echo "🏗️ Building and starting containers..."
      docker-compose up -d --build
      
      # Wait for services to be ready
      echo "⏳ Waiting for services to start..."
      sleep 60
      
      # Setup webhook service
      echo "🔗 Setting up webhook service..."
      systemctl enable docker
      systemctl start docker
      
      echo "✅ Setup completed successfully!"
      echo "🌐 Application will be available at: http://$(curl -s ifconfig.me)"
      echo "📊 Moodle available at: http://$(curl -s ifconfig.me)/moodle"

runcmd:
  - systemctl enable docker
  - systemctl start docker
  - usermod -aG docker ubuntu
  - /home/ubuntu/setup.sh

final_message: "🎉 Taxista EAD platform with CI/CD pipeline installation completed successfully!"